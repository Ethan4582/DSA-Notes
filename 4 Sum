https://leetcode.com/problems/4sum/description/


//the most optimal 

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
     int n = nums.size(); //size of the array
    set<vector<int>> st;

    //checking all possible quadruplets:
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
               set<long long > hashset;
            for (int k = j + 1; k < n; k++) {
                long long sum= nums[i]+nums[j];
                sum+=nums[k];
                long long forth = target -sum ;
                if (hasset.find(forth)!=hasset.end()){
                    vector<int>temp= {nums[i] nums[j], nums[k], int(forth)};
                    sort(temp.begin() , temp.end());
                    st.insert(temp);
                }

             //insert the lemen tint the hasset 
             hasset.insert(nums[k]);
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    return ans;
}
    }
};




///Better solution 

Time Complexity: O(N3*log(M)), where N = size of the array, M = no. of elements in the set.

Space Complexity: O(2 * no. of the quadruplets)+O(N)


We can trimdown the the 4 th array 
jsut like hasset and find elemnt betwee the thhrree elemnt use  3sum set reference

---------->imp --------> why we dont looktinthe entier array but inseed the elment between the the 3 0r 2 omdex in reference of 3 sum 
-> this is to avoid unnceccary and uneficend element finding 
-> us the prevoius approcah more efficent way to funde the elment 
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
     int n = nums.size(); //size of the array
    set<vector<int>> st;

    //checking all possible quadruplets:
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            set<long long> hashset;
            for (int k = j + 1; k < n; k++) {
                // taking bigger data type
                // to avoid integer overflow:
                long long sum = nums[i] + nums[j];
                sum += nums[k];
                long long fourth = target - sum;
                if (hashset.find(fourth) != hashset.end()) {
                    vector<int> temp = {nums[i], nums[j], nums[k], (int)(fourth)};
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
                // put the kth element into the hashset:
                hashset.insert(nums[k]);
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    return ans;
    }
};







Time Complexity: O(N^4), 
Space Complexity: O(2 * no. of the quadruplets) as we are using a set data structure and a list to store the quads.


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
     int n = nums.size(); //size of the array
    set<vector<int>> st;

    //checking all possible quadruplets:
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                for (int l = k + 1; l < n; l++) {
                    // taking bigger data type
                    // to avoid integer overflow:
                    long long sum = nums[i] + nums[j];
                    sum += nums[k];
                    sum += nums[l];

                    if (sum == target) {
                        vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    return ans;
}
};
