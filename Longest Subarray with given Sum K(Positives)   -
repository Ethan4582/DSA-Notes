https://takeuforward.org/arrays/longest-subarray-with-sum-k-postives-and-negatives/


-------------Only for postive and neagive number but not for zero    this the better approacj 
class Solution {
public:
    int subarraySum(vector<int>& nums, long long k) {
        int n = nums.size();
        map<long long, int> presum_map;
        long long sum = 0;
        int max_len = 0;
        
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            
            // Check if the current sum equals k
            if (sum == k) {
                max_len = max(max_len, i + 1);
            }
            
            // Calculate the remainder and check if it exists in the presum_map
            long long rem = sum - k;
            if (presum_map.find(rem) != presum_map.end()) {
                int len = i - presum_map[rem];
                max_len = max(max_len, len);
            }
            
            // Store the current sum along with its index
            // Considering the edge case
            if (presum_map.find(sum) == presum_map.end()) {
                presum_map[sum] = i;
            }
        }
        
        return max_len;
    }
};











https://takeuforward.org/data-structure/longest-subarray-with-given-sum-k/




Longest Subarray with given Sum K(Positives)

---->>>most optimal soln
Optimal if it conatin only 0 and 1  

Time Complexity: O(2*N), where N = size of the given arr

Space Complexity: O(1) as we are not using any extra space.

-- 2 pointer approach   and we shrink  the sub array it from back if it excend the sum  and check if it was biggesrthan tle longest subarray 

-----------------------------------if it conatian  0 and positive number 
int getLongestSubarray(vector<int>& a, long long k) {
    int n = a.size(); // size of the array.

    int left = 0, right = 0; // 2 pointers
    long long sum = a[0];
    int maxLen = 0;
    while (right < n) {
        // if sum > k, reduce the subarray from left
        // until sum becomes less or equal to k:
        while (left <= right && sum > k) {
            sum -= a[left];
            left++;
        }

        // if sum = k, update the maxLen i.e. answer:
        if (sum == k) {
            maxLen = max(maxLen, right - left + 1);
        }

        // Move forward thw right pointer:
        right++;
        if (right < n) sum += a[right];
    }

    return maxLen;
}













Subarry the conatigoues part it has follow some pattern  [ not neccessay ]

https://leetcode.com/problems/subarray-sum-equals-k/submissions/1186355000/

https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1

-------------->>>>>.better solution ------->hashing 

Time Complexity: O(N) or O(N*logN) depending on which map data structure we are using, where N = size of the array.

Space Complexity: O(N) as we are using a map data structure.


---------------------------------->this code run for  postive and neagtive number  number   not zero 
class Solution {
public:
    int subarraySum(vector<int>& nums, long long k) {
        int n = nums.size();
        map<long long, int> presum_map;
        long long sum = 0;
        int max_len = 0;
        
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            
            // Check if the current sum equals k
            if (sum == k) {
                max_len = max(max_len, i + 1);
            }
            
            // Calculate the remainder and check if it exists in the presum_map
            long long rem = sum - k;
            if (presum_map.find(rem) != presum_map.end()) {
                int len = i - presum_map[rem];
                max_len = max(max_len, len);
            }
            
            // Store the current sum along with its index
            // Considering the edge case
            if (presum_map.find(sum) == presum_map.end()) {
                presum_map[sum] = i;
            }
        }
        
        return max_len;
    }
};




















//Brute force   -  generate all the possible sub-array 

tc- 0(n^2 )
sc- 0(1)



int getLongestSubarray(vector<int>& a, long long k) {
    int n = a.size(); // size of the array.

    int len = 0;
    for (int i = 0; i < n; i++) { // starting index
        for (int j = i; j < n; j++) { // ending index
            // add all the elements of
            // subarray = a[i...j]:
            long long s = 0;
            for (int K = i; K <= j; K++) {
                s += a[K];
            }

            if (s == k)
                len = max(len, j - i + 1);
        }
    }
    return len;
}


-->>  0(n^2 ) 


    iclass Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n =nums.size();    
    int len = 0;
    for (int i = 0; i < n; i++) { // starting index
     long long s = 0;
        for (int j = i; j < n; j++) { // ending index
            // add all the elements of
            // subarray = a[i...j]:
           
            s += nums[j];

            if (s == k)
                len = max(len, j - i + 1);
        }
    }
    return len;
        
    }
};














