https://leetcode.com/problems/rotate-image/description/
https://leetcode.com/problems/spiral-matrix/description/


Sprial mattris 

Time Complexity: O(m x n) {
Space Complexity: O(n) 


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty())
            return {}; // If the matrix is empty, return an empty vector

        const int m = matrix.size(); // Number of rows
        const int n = matrix[0].size(); // Number of columns
        vector<int> ans; // Vector to store the spiral order elements
        int r1 = 0, c1 = 0; // Starting row and column
        int r2 = m - 1, c2 = n - 1; // Ending row and column

        // Repeatedly add matrix[r1..r2][c1..c2] to `ans`.
        while (ans.size() < m * n) {
            // Traverse from left to right
            for (int j = c1; j <= c2 && ans.size() < m * n; ++j)
                ans.push_back(matrix[r1][j]);
            // Traverse from top to bottom
            for (int i = r1 + 1; i <= r2 - 1 && ans.size() < m * n; ++i)
                ans.push_back(matrix[i][c2]);
            // Traverse from right to left
            for (int j = c2; j >= c1 && ans.size() < m * n; --j)
                ans.push_back(matrix[r2][j]);
            // Traverse from bottom to top
            for (int i = r2 - 1; i >= r1 + 1 && ans.size() < m * n; --i)
                ans.push_back(matrix[i][c1]);
            // Update the boundaries for the next loop iteration
            ++r1, ++c1, --r2, --c2;
        }

        return ans; // Return the spiral order vector
    }
};

//////////////////////////////////////////////////////////

------------  Rotate image 

Optimal 

Transpose the matrix  and then reverse  is the optimal approach

How to transpose -  avoid the diagniol element 
[0] [1]= [1][0]
..
..
.
.
[1][3]=[3][1]

Time Complexity: O(N*N) + O(N*N).One O(N*N) is for transposing the matrix and the other is for reversing the matrix.

Space Complexity: O(1).

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size(); // Size of the matrix
        
        // Transposing the matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                swap(matrix[i][j], matrix[j][i]); // Swap elements across the diagonal
            }
        }
        
        // Reversing each row of the matrix
        for (int i = 0; i < n; i++) {
            reverse(matrix[i].begin(), matrix[i].end()); // Reverse elements in each row
        }
    }
};










Brute matrix 

Row first from go to  colum last to first 

there is pattern from intail j goes to change j[i] row
Time Complexity: O(N*N) to linearly iterate and put it into some other matrix.

Space Complexity: O(N*N) to copy it into some other matrix.


class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size(); // Size of the matrix
        vector<vector<int>> rotated(n, vector<int>(n, 0)); // Create a new matrix to store rotated elements
        
        // Traverse the original matrix and rotate elements
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = matrix[i][j]; // Rotate each element
            }
        }
        
        matrix = rotated; // Update the original matrix with the rotated matrix
    }
};












