
Majority elemnt  3  

//most optimal 
Extended Boyer Moore’s Voting Algorithm
cnt1 & cnt2 –  for tracking the counts of elements
el1 & el2 – for storing the majority of elements.


Time Complexity: O(N) + O(N)
Space Complexity: O(1) 

class Solution {
public:
    std::vector<int> majorityElement(std::vector<int>& v) {
        int n = v.size(); // Size of the array

        int cnt1 = 0, cnt2 = 0; // Counts
        int el1 = INT_MIN; // Element 1
        int el2 = INT_MIN; // Element 2

        // Applying the Extended Boyer-Moore's Voting Algorithm:
        for (int i = 0; i < n; i++) {
            if (cnt1 == 0 && el2 != v[i]) { // therwill be a case it will be hilding another value which othe aready have 
                cnt1 = 1;
                el1 = v[i];
            }
            else if (cnt2 == 0 && el1 != v[i]) {
                cnt2 = 1;
                el2 = v[i];
            }
            else if (v[i] == el1) cnt1++;
            else if (v[i] == el2) cnt2++;
            else {
                cnt1--, cnt2--;
            }
        }

        std::vector<int> ls; // List of answers

        // Manually check if the stored elements in
        // el1 and el2 are the majority elements:
        cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == el1) cnt1++;
            else if (v[i] == el2) cnt2++;
        }

        int mini = int(n / 3) + 1;
        if (cnt1 >= mini) ls.push_back(el1);
        if (cnt2 >= mini) ls.push_back(el2);

        // Uncomment the following line
        // if it is told to sort the answer array:
        // sort(ls.begin(), ls.end()); //TC --> O(2*log2) ~ O(1);

        return ls;
    }
};











//Better --> hashing 
Time Complexity: O(N*logN),
Space Complexity: O(N) 


class Solution {
public:
    vector<int> majorityElement(vector<int>& v) {
        int n = v.size(); // Size of the array
        vector<int> ls; // List of answers

        // Declaring a map:
        map<int, int> mpp;

        // Least occurrence of the majority element:
        int mini = int(n / 3) + 1;

        // Storing the elements with their occurrences:
        for (int i = 0; i < n; i++) {
            mpp[v[i]]++;

            // Checking if v[i] is the majority element:
            if (mpp[v[i]] == mini) {
                ls.push_back(v[i]);
            }

            // If two majority elements found, break the loop:
            if (ls.size() == 2) {
                break;
            }
        }

        return ls;
    }
};



class Solution {
public:
    std::vector<int> majorityElement(std::vector<int>& nums) {
        int n = nums.size();
        std::map<int, int> mpp;
        for (int i = 0; i < n; i++) {
            mpp[nums[i]]++;
        }

        std::vector<int> result;
        for (auto it : mpp) {
            if (it.second > n / 3) {
                result.push_back(it.first);
            }
        }

        return result;
    }
};
















// Brutr force 

Time Complexity: O(N2), 
Space Complexity: O(1) as we are using a list that stores a maximum of 2 element

#include <vector>

class Solution {
public:
    std::vector<int> majorityElement(std::vector<int>& nums) {
        int n = nums.size();
        std::vector<int> ls; // List to store majority elements

        for (int i = 0; i < n; i++) {
            if (ls.empty() || ls.back() != nums[i]) {
                int cnt = 0;
                for (int j = 0; j < n; j++) {
                    if (nums[j] == nums[i]) {
                        cnt++;
                    }
                }
                if (cnt > n / 3) {
                    ls.push_back(nums[i]);
                }
                if (ls.size() == 2) break;
            }
        }

        return ls;
    }
};























https://leetcode.com/problems/majority-element/description/

majority 2    elemnt present more then n/ 2 times 



Most Otimal 
 Moore's Voting Algorithm

we conider the first elent as  the answer if we have found the number increse the count 1 if any other number decreses the count 
-> as it tuen to zero move to next elment and do the same 
-> some one ahs to be apper  more than  n?2 time the size of the array to be dominant 


-> so the inituation is that if the first elent was the majorty element it must have to been cancelled   so their are other elenmnt 
Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the count and find the expected majority element. The second one is to check if the expected element is the majority one or not.
Space Complexity: O(1) as we are not using any extra space.

#include <vector>

class Solution {
public:
    int majorityElement(std::vector<int>& nums) {
        int n = nums.size();
        int el, cnt = 0;

        for (int i = 0; i < n; i++) {
            if (cnt == 0) {
                el = nums[i];
                cnt = 1;
            } else if (nums[i] == el) {
                cnt++;
            } else {
                cnt--;
            }
        }

        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == el) {
                cnt1++;
            }
        }

        if (cnt1 > n / 2) {
            return el;
        }
        
        return -1;
    }
};










optimal  ------ using hashing 
ime Complexity: O(N*logN) + O(N), where N = size of the given array.
Space Complexity: O(N) as we are using a map data structure.


class Solution {
public:
    int majorityElement(std::vector<int>& nums) {
        int n = nums.size();
        std::unordered_map<int, int> mpp;
        
        for (int i = 0; i < n; i++) {
            mpp[nums[i]]++;
        }

        for (auto it : mpp) {
            if (it.second > n / 2) {
                return it.first;
            }
        }
        
        return -1; // No majority element found
    }
};






Inmap key are stre in sorted order 

Previous code time complexity: O(n)
Previous code space complexity: O(n)

#include <vector>
#include <unordered_map>

class Solution {
public:
    int majorityElement(std::vector<int>& nums) {
        std::unordered_map<int, int> counts;
        int n = nums.size();
        
        // Count the occurrences of each element
        for (int num : nums) {
            counts[num]++;
        }
        
        // Find the element with count greater than n/2
        for (auto& pair : counts) {
            if (pair.second > n / 2) {
                return pair.first;
            }
        }
        
        return -1; // No majority element found
    }
};





Brute Forces - counting each number through entier arrray 


Time Complexity: O(N2), 
Space Complexity: O(1)


 class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] == nums[i]) {
                    cnt++;
                }
            }

            if (cnt > n / 2) {
                return nums[i];
            }
        }

        // If no majority element found
        return -1; // Or any other appropriate value
    }
};


using on order set 
 space complexity is O(n) 
Time complexity   O(n + m * n), 

class Solution {
public:
    int majorityElement(std::vector<int>& nums) {
        std::unordered_set<int> uniqueNums;
        int n = nums.size();
        
        // Insert all elements of nums into the unordered set
        for (int num : nums) {
            uniqueNums.insert(num);
        }
        
        // Iterate through unique elements and count their occurrences
        for (int num : uniqueNums) {
            int count = 0;
            for (int i = 0; i < n; ++i) {
                if (nums[i] == num) {
                    count++;
                }
            }
            // If the count is greater than n/2, return the element
            if (count > n / 2) {
                return num;
            }
        }
        
        return -1; // No majority element found
    }
};

