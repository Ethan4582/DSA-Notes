Maximum Subarray Sum in an Array

https://leetcode.com/problems/maximum-subarray/


---->  follow up  question 
  We need to print any of them. sub array 



class Solution {
 public:
  int maxSubArray(vector<int>& nums) {
    
    vector<int> dp(nums.size());

    dp[0] = nums[0];
    for (int i = 1; i < nums.size(); ++i)
      dp[i] = max(nums[i], dp[i - 1] + nums[i]);

    return ranges::max(dp);
  }
};


//////////////          kadams Algo  //////////////////////////////////


-> we campre  the sum with  INT_MIN   and if also if sum<0  i will drop the elmemnt and take the next element and start from there 

Time Complexity: O(N), 
Space Complexity: O(1) 

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        long long sum = 0, maxi = LONG_MIN;

        for (int i = 0; i < n; i++) {
            sum += nums[i];  // adding the number and then checking 
            if (sum > maxi) {
                maxi = sum;  // Update maximum if the current sum is greater
            }

            // Make sure the sum is positive, then only consider it
            if (sum < 0) {
                sum = 0;
            }
        }

        return maxi;  // Return the maximum sum found
    }
};





------------------------....>>>>  gfg 

https://shorturl.at/eLO13


class Solution{   
public:
    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        long long sum = 0; // Initialize sum
        long long maxi = LLONG_MIN; // Initialize maximum sum with the smallest possible long long value

        // Apply Kadane's algorithm
        for (int i = 0; i < N; i++) {
            sum += Arr[i]; // Add current element to sum

            if (i >= K - 1) { // Check if window size is reached
                if (sum > maxi) { // Update maximum sum if necessary
                    maxi = sum;
                }
                if (sum < 0) { // Reset sum to 0 if it becomes negative
                    sum = 0;
                }
                sum -= Arr[i - K + 1]; // Remove the leftmost element from the window
            }
        }
        
        return maxi; // Return the maximum sum
    }
};








//////Brut force   
Tc- 0(n^3)
sc-0(n)

int maxSubarraySum(int arr[], int n) {
    int maxi = INT_MIN; // maximum sum

    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            // subarray = arr[i.....j]
            int sum = 0;

            //add all the elements of subarray:
            for (int k = i; k <= j; k++) {
                sum += arr[k];
            }

            maxi = max(maxi, sum);
        }
    }

    return maxi;
}



Tc- 0(n^2)
int maxSubarraySum(int arr[], int n) {
    int maxi = INT_MIN; // maximum sum

    for (int i = 0; i < n; i++) {
        int sum = 0;
        for (int j = i; j < n; j++) {
            // current subarray = arr[i.....j]

            //add the current element arr[j]
            // to the sum i.e. sum of arr[i...j-1]
            sum += arr[j];

            maxi = max(maxi, sum); // getting the maximum
        }
    }

    return maxi;
}

