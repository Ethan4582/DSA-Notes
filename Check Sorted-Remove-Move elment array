https://www.geeksforgeeks.org/problems/check-if-an-array-is-sorted0701/1


Time Complexity: O(n) 
Auxiliary Space: O(n) for Recursion Call Stack.

//Brutr force is recurrsive method 



bool arraySortedOrNot(int arr[], int n) {
        // code here
        
        for (int i= i ; i<n ; i++ ){
            if(arr[i] >=a[i-1]){
                
            }
            else{
                return false;
            }
        }
        return true ;
        
}

  
// Recursive approach to check if an
// Array is sorted or not
#include <bits/stdc++.h>
using namespace std;
 
// Function that returns 0 if a pair
// is found unsorted
int arraySortedOrNot(int arr[], int n)
{
    // Array has one or no element or the
    // rest are already checked and approved.
    if (n == 1 || n == 0)
        return 1;
 
    // Unsorted pair found (Equal values allowed)
    if (arr[n - 1] < arr[n - 2])
        return 0;
 
    // Last pair was sorted
    // Keep on checking
    return arraySortedOrNot(arr, n - 1);
}
 
// Driver code
int main()
{
    int arr[] = { 20, 23, 23, 45, 78, 88 };
    int n = sizeof(arr) / sizeof(arr[0]);
    if (arraySortedOrNot(arr, n))
        cout << "Yes\n";
    else
        cout << "No\n";
}






https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/



Brute force
TC --  n Log + n
Sc--  0(N)

class Solution {
public:
    int remove_duplicate(int a[], int n) {
        if (n == 0 || n == 1)
            return n;

        // Create a set to store unique elements
        std::set<int> uniqueSet;

        // Traverse the array and insert elements into the set
        for (int i = 0; i < n; ++i) {
            uniqueSet.insert(a[i]);
        }

        // Clear the original array
        n = 0;

        // Copy unique elements from the set back to the original array
        for (auto it = uniqueSet.begin(); it != uniqueSet.end(); ++it) {
            a[n++] = *it;
        }

        return uniqueSet.size();
    }
};



//optimal 
TC- 0(n )
SC - 0(1)
class Solution {
 public:
  int removeDuplicates(vector<int>& nums) {
     if (nums.empty()) 
            return 0;
        
        // Initialize a pointer to keep track of the position where the next unique element should be placed
        int nextUniqueIndex = 1;

        // Start iterating from the second element
        for (int i = 1; i < nums.size(); ++i) {
            // If the current element is different from the previous element
            if (nums[i] != nums[i - 1]) {
                // Place the current unique element at the next available position
                nums[nextUniqueIndex++] = nums[i];
            }
        }
        
        return nextUniqueIndex;
  }
};






